buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.2.0'
        //classpath 'app.brant:amazonappstorepublisher:0.1.0'
        //classpath 'com.github.BrantApps.gradle-amazon-app-store-publisher:amazonappstorepublisher:master-SNAPSHOT'
    }
}

plugins {
    id "com.github.triplet.play" version "3.8.6"
    id "io.sentry.android.gradle" version "4.1.0" apply false
    //id "app.brant.amazonappstorepublisher" version "0.1.0"
}

apply {
    plugin("com.android.application")
}

if (hasProperty('bugReport')) {
    apply plugin: 'io.sentry.android.gradle'
}

def keystorePropertiesFile = rootProject.file("keystore.properties");
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def sentryPropertiesFile = rootProject.file("sentry.properties");
def sentryProperties = new Properties()
if (sentryPropertiesFile.exists()) sentryProperties.load(new FileInputStream(sentryPropertiesFile))

allprojects {
    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven { url 'https://jitpack.io' }
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }
        // check tasks to add via ./gradlew tasks --all | grep DuplicateClasses
    }
}

static def getDate() {
    // we increment version number every 1000 seconds,
    // we started on 31/08/2016, and introduced splits on 06/02/2020
    // update 2022/11/25 to reset getDate offset (- 88364898L)
    def date = new Date().getTime() / 1000L - 1472637600L - 108380000L - 88364898L;
    return (int) (date / 1000L)
}

static def getFormattedDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd.HHmm')
    return formattedDate
}

import com.github.triplet.gradle.androidpublisher.ReleaseStatus

play {
    serviceAccountCredentials.set(file("nova.json"))
    track.set("internal")  // rollout, beta, alpha, release, internal
    //userFraction.set(0.1) // rollout rate in %/100
    //releaseStatus.set(ReleaseStatus.IN_PROGRESS)
    releaseStatus.set(ReleaseStatus.COMPLETED)
}

//amazon {
//    securityProfile = file("nova-amazon.json")
//    applicationId = "amzn1.devportal.mobileapp.c59461247b6a4806b4f30cd80076133e"
//    pathToApks = [ file("build/outputs/apk/amazon/release/Video-amazon-universal-API_21+-release.apk") ]
//    replaceEdit = true
//    replaceApks = true
//}

android {
    namespace 'com.archos.mediacenter.video'
    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
            enableV3Signing = true
            enableV4Signing = true
        }
        debug {
            if (keystorePropertiesFile.exists()) {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
            enableV3Signing = true
            enableV4Signing = true
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    buildFeatures {
        renderScript true
        aidl true
        buildConfig true
    }
    compileSdk 34
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            resources.srcDirs = ['src/main/java']
            aidl.srcDirs = ['src/main/java']
            renderscript.srcDirs = ['src/main/java']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }
    defaultConfig {
        applicationId = "org.courville.nova"
        generatedDensities = []
        minSdkVersion 21
        targetSdkVersion 33
        multiDexEnabled true
        // below version tracks the one from F-Droid or universal package when generated with ./gradlew -Puniversal
        // this is overridden when using split apk and normal split apk generation or oneapk amazon generation
        // amazon apk is generated with ./gradlew -Poneapk
        versionCode = 602040
        versionName = '6.2.40'
        def novaVersionName = versionName
        if (! project.hasProperty("universal")) {
            // override versionName and versionCode to get it dependent on the date
            versionName = versionName + "-" + getFormattedDate()
            // 2549909 is 20221124 last Google play release to reset counter
            versionCode = 2549909 + getDate()
        }
        archivesBaseName = "" + applicationId + "-" + versionCode + "-" + versionName
        println("defaultConfig archivesBaseName : " + archivesBaseName)
        println("defaultConfig versionName : " + versionName)
        println("defaultConfig versionCode : " + versionCode)
        if (keystorePropertiesFile.exists()) signingConfig signingConfigs.release
        if (project.hasProperty("sponsor")) {
            buildConfigField "boolean", "ENABLE_SPONSOR", "true"
        } else {
            buildConfigField "boolean", "ENABLE_SPONSOR", "false"
        }
        if (project.hasProperty("adultScrape")) {
            buildConfigField "boolean", "ADULT_SCRAPE", "true"
        } else {
            buildConfigField "boolean", "ADULT_SCRAPE", "false"
        }
        if (sentryPropertiesFile.exists()) {
            if (project.hasProperty("bugReport")) {
                buildConfigField "boolean", "ENABLE_BUG_REPORT", "true"
                buildConfigField "String", "SENTRY_DSN", "\"${sentryProperties['dsn']}\""
            } else {
                buildConfigField "boolean", "ENABLE_BUG_REPORT", "false"
                buildConfigField "String", "SENTRY_DSN", "\"\""
            }
        } else {
            buildConfigField "boolean", "ENABLE_BUG_REPORT", "false"
            buildConfigField "String", "SENTRY_DSN", "\"\""
        }
        resValue "string", "VERSION_NAME", versionName
        resValue "string", "APPLICATION_ID", applicationId
        resValue "string", "APP_INFO", "Nova v" + versionName + " (" + applicationId + ")"
        resValue "string", "APP_VERSION", novaVersionName
    }
    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
    splits {
        abi {
            if (project.hasProperty("universal")) {
                // universal if for fdroid now with specific version(Name|Code) and oneapk for amazon
                enable false
                universalApk true
            } else if (project.hasProperty("oneapk")) {
                // universal if for fdroid now with specific version(Name|Code) and oneapk for amazon
                enable true
                universalApk true
            } else {
                enable true
                universalApk false
            }
        }
    }
    flavorDimensions = ['amazon']
    productFlavors {
        amazon {
            dimension "amazon"
        }
        noamazon {
            dimension "amazon"
        }
        manageexternalstorage {
            dimension "amazon"
        }
    }
    aaptOptions {
        additionalParameters '--no-version-vectors'
    }
    buildTypes {
        println("buildTypes archivesBaseName : " + archivesBaseName)
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-project.txt'
        }
    }
    packagingOptions {
        jniLibs {
            excludes += ['META-INF/services/**',
                         'com/**',
                         'jcifs2/**',
                         'kotlin/**',
                         'okhttp3/**',
                         'org/**']
            pickFirsts += ['lib/x86/libnvpnativehelper.so',
                           'lib/x86_64/libnvpnativehelper.so',
                           'lib/armeabi-v7a/libnvpnativehelper.so',
                           'lib/arm64-v8a/libnvpnativehelper.so',
                           'lib/x86/libc++_shared.so',
                           'lib/x86_64/libc++_shared.so',
                           'lib/armeabi-v7a/libc++_shared.so',
                           'lib/arm64-v8a/libc++_shared.so']
        }
        resources {
            excludes += ['META-INF/*.kotlin_module',
                         'META-INF/*.version',
                         'META-INF/DEPENDENCIES',
                         'META-INF/LICENSE',
                         'META-INF/NOTICE',
                         'META-INF/LICENSE.txt',
                         'META-INF/LICENSE.md',
                         'META-INF/NOTICE.txt',
                         'META-INF/NOTICE.md',
                         'META-INF/beans.xml',
                         'META-INF/maven',
                         'META-INF/services/**',
                         'README',
                         'com/**',
                         'jcifs2/**',
                         'kotlin/**',
                         'okhttp3/**',
                         'org/**',
                         '**/*.txt',
                         '**/*.xml']
        }
    }
    lint {
        abortOnError false
        checkReleaseBuilds false
        disable 'MissingTranslation'
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.all { output ->
            def api = defaultConfig.minSdkVersion.apiLevel
            if (project.hasProperty("universal")) { // only one apk
                outputFileName = outputFileName.replace("-release", "-universal-release")
            }
            outputFileName = outputFileName.replace("-noamazon-", "-")
                    .replace("-manageexternalstorage-", "-")
            variant.getAssembleProvider().configure() {
                it.doLast {
                    println("generated: " + outputFileName + " (" + versionName + ", " + versionCode + ")");
                }
            }
        }
    }

}

dependencies {
    implementation project(':FileCoreLibrary')
    implementation project(':MediaLib')
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
    implementation 'com.squareup.picasso:picasso:2.8'
    implementation 'androidx.tvprovider:tvprovider:1.0.0'
    implementation 'androidx.media:media:1.7.0'
    implementation 'androidx.core:core:1.12.0'
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'
    implementation 'androidx.legacy:legacy-support-core-ui:1.0.0'
    implementation 'androidx.fragment:fragment:1.6.2'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'com.github.ksoichiro:android-observablescrollview:1.6.0'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.leanback:leanback:1.2.0-alpha04'
    implementation 'androidx.leanback:leanback-preference:1.2.0-alpha04'
    implementation 'androidx.tvprovider:tvprovider:1.0.0'
    implementation 'fr.turri:aXMLRPC:1.13.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    implementation 'io.sentry:sentry-android:7.1.0'
    implementation 'io.sentry:sentry:7.1.0'
}

// to avoid duplicate classes
configurations.implementation {
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
}
